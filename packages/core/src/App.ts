import { login } from "./authentication/commands/Login";
import { IUserRepository } from "./authentication/interfaces/UserRepository";
import {
  Command,
  CommandResponse,
  NamedCommand,
} from "./common/command/Command";
import { CommandBus } from "./common/command/CommandBus";
import { CommandBusDispatcher } from "./common/command/CommandBusDispatcher";
import { EventBusDispatcher } from "./common/events/EventBusDispatcher";
import { AuthenticationMiddleware } from "./common/middlewares/AuthenticationMiddleware";
import {
  LoggerMiddleware,
  LoggingLevel,
} from "./common/middlewares/LoggerMiddleware";
import { TransactionManager } from "./common/middlewares/TransactionManager";
import {
  BookASlotCommand,
  BookASlotHandler,
} from "./schedule/commands/BookASlot";
import { SendBookingConfirmations } from "./schedule/events/SendBookingConfirmations";
import { SheduleRepository } from "./schedule/repository/SheduleRepository";
import { EmailService } from "./services/email/EmailService";

export function makeApp(dependencies: {
  sheduleNotebook: SheduleRepository;
  userRepository: IUserRepository;
  emailService: EmailService;
}) {
  // The event bus dispatcher is the middleware that handles the domain events
  // generated by the commands.
  // We declare it first to inject it as an additionnal dependency
  const eventBusDispatcher = new EventBusDispatcher();
  const dependenciesWithEventBus = {
    ...dependencies,
    eventBus: eventBusDispatcher,
  };

  // The command Bus dispatcher is the middleware that handles the incoming commands
  const commandBusDispatcher = new CommandBusDispatcher();

  const t: Command<BookASlotCommand> = BookASlotHandler(
    dependenciesWithEventBus
  );

  // We add all the commands to the command Bus dispatcher
  commandBusDispatcher
    .addUseCase(BookASlotHandler(dependenciesWithEventBus))
    .toHandleCommand("Book a slot")
    .addUseCase(login(dependenciesWithEventBus))
    .toHandleCommand("Login");

  // And the handlers for the domain events
  eventBusDispatcher
    .addHandler(SendBookingConfirmations(dependenciesWithEventBus))
    .toHandleEvent("Slot booked");

  // It's easy to add more middlewares to the bus
  const commandBus = new CommandBus()
    .addMiddleware(commandBusDispatcher)
    .addMiddleware(eventBusDispatcher)
    .addMiddleware(
      new LoggerMiddleware(LoggingLevel.error, dependenciesWithEventBus)
    )
    .addMiddleware(new AuthenticationMiddleware(dependenciesWithEventBus))
    .addMiddleware(new TransactionManager());

  return {
    run: <T extends NamedCommand>(command: T) => commandBus.execute(command),
    dependencies: dependenciesWithEventBus,
  };
}

export type App = ReturnType<typeof makeApp>;
export type Dependencies = App["dependencies"];
